// http://turtle.sourceforge.net
//
// Copyright Mathieu Champlon 2012
//
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)

#ifndef MOCK_SIGNATURE_HPP_INCLUDED
#define MOCK_SIGNATURE_HPP_INCLUDED

#include "../config.hpp"
#include <type_traits>

namespace mock { namespace detail {
#define MOCK_NOARG
#define MOCK_STRIP_FUNCTION_QUALIFIERS(cv, ref)              \
    template<typename R, typename... Args>                   \
    struct strip_function_qualifiers<R(Args...) cv ref>      \
    {                                                        \
        using type = R(Args...);                             \
    };                                                       \
    template<typename R, typename... Args>                   \
    struct strip_function_qualifiers<R(Args..., ...) cv ref> \
    {                                                        \
        using type = R(Args..., ...);                        \
    };

#define MOCK_STRIP_FUNCTION_QUALIFIERS_REF(cv) \
    MOCK_STRIP_FUNCTION_QUALIFIERS(cv, )       \
    MOCK_STRIP_FUNCTION_QUALIFIERS(cv, &)      \
    MOCK_STRIP_FUNCTION_QUALIFIERS(cv, &&)

    template<typename>
    struct strip_function_qualifiers;
    MOCK_STRIP_FUNCTION_QUALIFIERS_REF(MOCK_NOARG)
    MOCK_STRIP_FUNCTION_QUALIFIERS_REF(const)
    MOCK_STRIP_FUNCTION_QUALIFIERS_REF(volatile)
    MOCK_STRIP_FUNCTION_QUALIFIERS_REF(const volatile)
#undef MOCK_NOARG
#undef MOCK_STRIP_FUNCTION_QUALIFIERS
#undef MOCK_STRIP_FUNCTION_QUALIFIERS_REF

    template<typename M>
    struct signature;

    template<typename R, typename... Args>
    struct signature<R(Args...)>
    {
        using type = R(Args...);
    };

    template<typename Sig, typename C>
    struct signature<Sig(C::*)> : signature<typename strip_function_qualifiers<Sig>::type>
    {};

    template<typename T>
    struct base
    {
        typedef T base_type;
    };

    // if an error is generated by the line below it means
    // the method is ambiguous : specify its signature to
    // disambiguate
    template<typename T>
    T& ambiguous_method_requires_to_specify_signature(const T&);
}} // namespace mock::detail

#define MOCK_SIGNATURE(M)                                                      \
    mock::detail::signature<std::remove_cv_t<std::remove_reference_t<decltype( \
      mock::detail::ambiguous_method_requires_to_specify_signature(&base_type::M))>>>::type

#endif // MOCK_SIGNATURE_HPP_INCLUDED
